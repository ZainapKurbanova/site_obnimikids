import logging
from django.core.management.base import BaseCommand
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram_bot.models import TelegramUser
from orders.models import Order
from django.conf import settings

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

ADMINS = [509241742]
admin_reply_sessions = {}

def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")]
    ], resize_keyboard=True)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    start_payload = context.args[0] if context.args else ''

    TelegramUser.objects.get_or_create(
        chat_id=chat_id,
        defaults={
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
        }
    )

    if start_payload.startswith("order_"):
        order_id = start_payload.split("_")[1]
        try:
            order = Order.objects.get(id=order_id)
            order.tg_chat_id = chat_id
            order.save(update_fields=['tg_chat_id'])

            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("–î–∞, –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_order")
            ]])

            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                     f"–¢–æ–≤–∞—Ä: {order.items.first().product.name} √ó {order.items.first().quantity}\n"
                     f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.city}, {order.address_detail}\n"
                     f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_cost} ‚ÇΩ\n"
                     f"–°—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
                     f"–ò—Ç–æ–≥–æ: {order.get_total_with_delivery()} ‚ÇΩ\n\n"
                     f"–í—Å—ë –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
                reply_markup=keyboard
            )

        except Order.DoesNotExist:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await context.bot.send_message(
        chat_id=chat_id,
        text="üìç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
        reply_markup=main_menu()
    )

async def handle_pay_request(context, chat_id, order_id):
    try:
        order = Order.objects.get(id=order_id)
        order.status = 'pending'
        order.save(update_fields=['status'])

        for admin_id in ADMINS:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"reply_to_{chat_id}"),
                InlineKeyboardButton("‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"mark_paid_{chat_id}")
            ]])
            await context.bot.send_message(
                chat_id=admin_id,
                text=(f"üí≥ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} –æ—Ç @{order.user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} "
                      f"(chat_id: {chat_id}).\n\nüí¨ –°–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."),
                reply_markup=keyboard
            )

        await context.bot.send_message(chat_id=chat_id, text="üí¨ –°–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.")

    except Order.DoesNotExist:
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = query.message.chat.id
    await query.answer()

    if data.startswith("pay_"):
        order_id = data.split("_")[1]
        await handle_pay_request(context, chat_id, order_id)

    elif data.startswith("reply_to_"):
        client_chat_id = data.split("_")[-1]
        admin_reply_sessions[chat_id] = client_chat_id
        await context.bot.send_message(chat_id=chat_id, text="‚úç –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")

    elif data.startswith("mark_paid_"):
        client_chat_id = data.split("_")[-1]
        try:
            order = Order.objects.filter(tg_chat_id=client_chat_id).latest('created_at')
            order.status = 'paid'
            order.save(update_fields=['status'])
            await context.bot.send_message(chat_id=client_chat_id, text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
            await context.bot.send_message(chat_id=chat_id, text="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –∫–∞–∫ '–û–ø–ª–∞—á–µ–Ω–æ'.")
        except Order.DoesNotExist:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif data == "cancel_order":
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await context.bot.send_message(chat_id=chat_id, text="‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        context.user_data["awaiting_question"] = True
    elif text == "üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞":
        await context.bot.send_message(chat_id=chat_id, text="üìÆ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        context.user_data["awaiting_order_id"] = True
    elif context.user_data.get("awaiting_question"):
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {chat_id}:\n{text}")
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        context.user_data["awaiting_question"] = False
    elif context.user_data.get("awaiting_order_id"):
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=f"üì¶ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç {chat_id}: {text}")
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –æ—Ç–≤–µ—Ç–∏–º.")
        context.user_data["awaiting_order_id"] = False
    elif chat_id in admin_reply_sessions:
        target_chat_id = admin_reply_sessions.pop(chat_id)
        await context.bot.send_message(chat_id=target_chat_id, text=f"üì® –ê–¥–º–∏–Ω:\n{text}")
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}:\n{text}")
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message = update.message

    if message.photo or message.document:
        for admin_id in ADMINS:
            await context.bot.forward_message(chat_id=admin_id, from_chat_id=chat_id, message_id=message.message_id)
            await context.bot.send_message(chat_id=admin_id, text=f"üõâ –ß–µ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {chat_id}")

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞'

    def handle(self, *args, **options):
        application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start_handler))
        application.add_handler(CallbackQueryHandler(callback_query_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
        application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, media_handler))

        self.stdout.write("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
        application.run_polling()
