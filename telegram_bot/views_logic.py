import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async

from telegram_bot.models import TelegramUser
from orders.models import Order

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")]
    ], resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@sync_to_async
def create_or_get_user(chat_id, first_name, last_name, username):
    return TelegramUser.objects.get_or_create(
        chat_id=chat_id,
        defaults={
            "first_name": first_name,
            "last_name": last_name,
            "username": username,
        }
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID (—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π)
@sync_to_async
def get_order_with_items(order_id):
    return Order.objects.select_related('user').prefetch_related('items__product').get(id=order_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    args = context.args

    logger.info(f"üì• –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã. chat_id={chat_id}, args={args}")

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await create_or_get_user(
        chat_id=chat_id,
        first_name=user.first_name,
        last_name=user.last_name,
        username=user.username
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à—ë–ª –ª–∏ –∑–∞–∫–∞–∑
    if args and args[0].startswith("order_"):
        order_id = args[0].split("_")[1]
        try:
            order = await get_order_with_items(order_id)
            order.tg_chat_id = chat_id
            await sync_to_async(order.save)(update_fields=["tg_chat_id"])

            item = order.items.first()
            product = item.product.name if item else "–¢–æ–≤–∞—Ä"
            quantity = item.quantity if item else 1

            # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞, –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}"),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_order")]
            ])

            await context.bot.send_message(
                chat_id=chat_id,
                text=(
                    f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–¢–æ–≤–∞—Ä: {product} √ó {quantity}\n"
                    f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.city}, {order.address_detail}\n"
                    f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_cost} ‚ÇΩ\n"
                    f"–°—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
                    f"–ò—Ç–æ–≥–æ: {order.get_total_with_delivery()} ‚ÇΩ\n\n"
                    f"–í—Å—ë –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?"
                ),
                reply_markup=keyboard
            )

        except Order.DoesNotExist:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:")
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=chat_id,
        text="üìç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
        reply_markup=main_menu()
    )

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = query.message.chat.id
    await query.answer()

    if data.startswith("pay_"):
        order_id = data.split("_")[1]
        await handle_pay_request(context, chat_id, order_id)

    elif data.startswith("reply_to_"):
        client_chat_id = data.split("_")[-1]
        admin_reply_sessions[chat_id] = client_chat_id
        await context.bot.send_message(chat_id=chat_id, text="‚úç –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")

    elif data.startswith("mark_paid_"):
        client_chat_id = data.split("_")[-1]
        try:
            order = Order.objects.filter(tg_chat_id=client_chat_id).latest('created_at')
            order.status = 'paid'
            order.save(update_fields=['status'])
            await context.bot.send_message(chat_id=client_chat_id, text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑.")
            await context.bot.send_message(chat_id=chat_id, text="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –∫–∞–∫ '–û–ø–ª–∞—á–µ–Ω–æ'.")
        except Order.DoesNotExist:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

    elif data == "cancel_order":
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await context.bot.send_message(chat_id=chat_id, text="‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.")
        context.user_data["awaiting_question"] = True
    elif text == "üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞":
        await context.bot.send_message(chat_id=chat_id, text="üìÆ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        context.user_data["awaiting_order_id"] = True
    elif context.user_data.get("awaiting_question"):
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (chat_id: {chat_id}):\n{text}")
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω. –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.")
        context.user_data["awaiting_question"] = False
    elif context.user_data.get("awaiting_order_id"):
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=f"üì¶ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç chat_id {chat_id}:\n{text}")
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")
        context.user_data["awaiting_order_id"] = False
    elif chat_id in admin_reply_sessions:
        target_chat_id = admin_reply_sessions.pop(chat_id)
        await context.bot.send_message(chat_id=target_chat_id, text=f"üì® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n{text}")
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (chat_id: {chat_id}):\n{text}")
        await context.bot.send_message(chat_id=chat_id, text="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")

async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message = update.message
    if message.photo or message.document:
        for admin_id in ADMINS:
            await context.bot.forward_message(chat_id=admin_id, from_chat_id=chat_id, message_id=message.message_id)
            await context.bot.send_message(chat_id=admin_id, text=f"üõâ –ß–µ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (chat_id: {chat_id})")
